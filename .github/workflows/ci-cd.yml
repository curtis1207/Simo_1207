name: CI/CD Pipeline for Sentiment Model

on:
  push:
    branches:
      - dev # Le pipeline se déclenchera à chaque push sur la branche 'dev'
  # pull_request:
  #   branches:
  #     - main # Le pipeline se déclenchera à chaque PR vers la branche 'main' (optionnel pour ce TP)

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Utilise un runner Ubuntu pour exécuter les actions

    # Variables d'environnement pour ce job. Elles peuvent être référencées dans les steps.
    env:
      PYTHON_VERSION: '3.10' # Spécifiez la version de Python
      # Le répertoire de sortie du modèle a été changé pour correspondre à MODEL_DIR de model.py
      MODEL_OUTPUT_DIR: 'models_dummy'
      EVAL_RESULTS_FILE: 'evaluation_results.json' # Fichier des résultats d'évaluation
      DEPLOY_STATUS_FILE: 'deployment_status.json' # Fichier du statut de déploiement

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4 # Récupère le code de votre dépôt

    - name: Set up Python environment
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }} # Utilise la version de Python définie ci-dessus

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        # Installe les dépendances principales pour le ML et Hugging Face Hub (TensorFlow inclus)
        pip install tensorflow scikit-learn huggingface_hub python-dotenv

    - name: Create Directories for Models and Data
      run: |
        # Crée les répertoires nécessaires pour le modèle factice et les résultats
        mkdir -p models_dummy
        mkdir -p data
        # S'assure que les répertoires nécessaires existent avant l'entraînement/évaluation

    - name: Train Model
      # Appelle la fonction train_and_save_model depuis scripts/model.py
      run: python scripts/model.py train

    - name: Evaluate Model
      id: evaluate # Donne un ID à cette étape pour récupérer ses sorties
      # Appelle la fonction evaluate_model_and_save_results depuis scripts/model.py
      run: python scripts/model.py evaluate

    - name: Get Evaluation Score
      id: get_score # Donne un ID pour récupérer le F1-score pour le déploiement/notification
      run: |
        # Lit le F1-score depuis le fichier JSON généré par evaluate.py
        F1_SCORE=$(jq -r '.f1_score' ${{ env.EVAL_RESULTS_FILE }})
        echo "F1_SCORE_MODEL=$F1_SCORE" >> $GITHUB_ENV # Rend le score disponible pour les étapes suivantes
        echo "::notice file=${{ env.EVAL_RESULTS_FILE }}::F1-score du modèle : $F1_SCORE"

    - name: Deploy Model to Hugging Face
      id: deploy # Donne un ID à cette étape
      # Appelle le nouveau script deploy.py
      run: python scripts/deploy.py
      env:
        # Passe les secrets GitHub en tant que variables d'environnement au script deploy.py
        HF_API_KEY: ${{ secrets.HF_API_KEY }}
        THRESHOLD_SCORE: ${{ secrets.THRESHOLD_SCORE }}

    - name: Get Deployment Status
      id: get_deploy_status
      if: always() # Exécute cette étape même si 'Deploy Model' a échoué
      run: |
        if [ -f ${{ env.DEPLOY_STATUS_FILE }} ]; then
          STATUS=$(jq -r '.status' ${{ env.DEPLOY_STATUS_FILE }})
          F1_SCORE=$(jq -r '.f1_score' ${{ env.DEPLOY_STATUS_FILE }})
          echo "DEPLOYMENT_STATUS=$STATUS" >> $GITHUB_ENV
          echo "DEPLOYED_F1_SCORE=$F1_SCORE" >> $GITHUB_ENV
          echo "::notice file=${{ env.DEPLOY_STATUS_FILE }}::Statut de déploiement : $STATUS, F1-score : $F1_SCORE"
        else
          echo "::error::Fichier de statut de déploiement non trouvé."
          echo "DEPLOYMENT_STATUS=unknown" >> $GITHUB_ENV
          echo "DEPLOYED_F1_SCORE=N/A" >> $GITHUB_ENV
        fi

    - name: Send Email Notification
      if: always() # Important: pour envoyer la notification même en cas d'échec
      uses: dawidd6/action-send-mail@v3.1.0
      with:
        server_address: smtp.gmail.com # Exemple pour Gmail
        server_port: 465 # Port SSL pour Gmail
        username: ${{ secrets.SMTP_USER }} # Votre adresse email
        password: ${{ secrets.SMTP_PASS }} # Votre mot de passe d'application (pour Gmail)
        subject: 'CI/CD Pipeline Result for Sentiment Model'
        # Informations sur l'état du workflow
        body: |
          CI/CD Pipeline Run #${{ github.run_number }} (${{ github.run_id }})
          Branche : ${{ github.ref }}
          Commit par : ${{ github.actor }}
          Message du commit : ${{ github.event.head_commit.message }}

          ---
          F1-score du modèle : ${{ env.DEPLOYED_F1_SCORE }} (Seuil : ${{ secrets.THRESHOLD_SCORE }})
          Statut de déploiement : ${{ env.DEPLOYMENT_STATUS }}

          Consultez les logs complets ici : ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        to: ${{ secrets.SMTP_USER }} # Utilise votre email du secret SMTP_USER
        from: GitHub Actions <no-reply@github.com> # L'expéditeur